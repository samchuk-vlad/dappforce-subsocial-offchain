# docker-compose.yml
version: "3"
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.1
    container_name: subsocial-elasticsearch
    restart: on-failure
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx1024m"
      MAX_MAP_COUNT: "64000"
      discovery.type: "single-node"
      cluster.name: "subsocial-cluster"
      node.name: "subsocial-node"
      http.port: "9200"
      http.cors.enabled: "true"
      http.cors.allow-credentials: "true"
      http.cors.allow-origin: "*"
      http.cors.allow-methods: "GET"
      http.cors.allow-headers: "X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization,Access-Control-Allow-Headers,Accept"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    network_mode: "host"

  postgres:
    image: postgres:12.4
    container_name: subsocial-postgres
    restart: on-failure
    environment:
      POSTGRES_DB: subsocial
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: 1986
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    # network_mode: "host"

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: on-failure
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
    network_mode: "host"

  graphql-engine:
    image: hasura/graphql-engine:v1.3.2
    container_name: subsocial-hasura
    depends_on:
      - "postgres"
    restart: on-failure
    ports:
      - "5050:8080"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://dev:1986@postgres:5432/subsocial 
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      ## HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey

## IPFS Cluster #################################
#################################################

  ipfs0:
    image: ipfs/go-ipfs:v0.5.1
    container_name: subsocial-ipfs-node
    restart: on-failure
    ports:
      - "4001:4001"
      - "127.0.0.1:5001:5001"
      - "8080:8080"
    volumes:
      - ./ipfs-data/daemon/staging:/export
      - ./ipfs-data/daemon/data:/data/ipfs

  ipfs-cluster:
    image: ipfs/ipfs-cluster:v0.13.0
    container_name: subsocial-ipfs-cluster
    depends_on:
      - ipfs0
    environment:
      CLUSTER_PEERNAME: "Subsocial Cluster"
      CLUSTER_SECRET: "" # From shell variable if set
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs0/tcp/5001
      CLUSTER_CRDT_TRUSTERPEERS: '*' # Trust all peers in Cluster (initially)
      CLUSTER_RESTAPI_CORSALLOWEDORIGINS: '*'
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9094 # Expose API
      CLUSTER_MONITORPINGINTERVAL: 2s # Speed up peer discovery
    ports:
      - "127.0.0.1:9094:9094"
      # - "9096:9096"
    volumes:
      - ./ipfs-data/cluster:/data/ipfs-cluster

#################################################
#################################################

  offchain:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
    image: dappforce/subsocial-offchain:latest
    container_name: subsocial-offchain
    depends_on:
      - postgres
      - elasticsearch
      - ipfs-cluster
    restart: on-failure
    environment:
      - NODE_ENV=production
    network_mode: "host"

volumes:
  es_data:
    driver: local
  postgres_data:
    driver: local
